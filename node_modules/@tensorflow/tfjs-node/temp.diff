diff --git a/src/nodejs_kernel_backend.ts b/src/nodejs_kernel_backend.ts
index 6a19bf5..0de188e 100644
--- a/src/nodejs_kernel_backend.ts
+++ b/src/nodejs_kernel_backend.ts
@@ -20,6 +20,7 @@ import {BackendTimingInfo, DataType, fill, KernelBackend, ones, Rank, rsqrt, sca
 import {Conv2DInfo} from '@tensorflow/tfjs-core/dist/ops/conv_util';
 import {upcastType} from '@tensorflow/tfjs-core/dist/types';
 
+import {Concat} from './ops/array_ops_gen';
 import {createTypeOpAttr, getTFDType} from './ops/op_utils';
 import {TensorMetadata, TFEOpAttr, TFJSBinding} from './tfjs_binding';
 
@@ -221,14 +222,7 @@ export class NodeJSKernelBackend implements KernelBackend {
   }
 
   concat(a: Tensor2D, b: Tensor2D): Tensor2D {
-    const opAttrs = [
-      {name: 'N', type: this.binding.TF_ATTR_INT, value: 2},
-      createTypeOpAttr('Tidx', 'int32'), createTypeOpAttr('T', a.dtype)
-    ];
-    // Concats 2d tensors along axis=1. See comments in MathBackend.concat().
-    const axisTensor = scalar(1, 'int32');
-    return this.executeSingleOutput('ConcatV2', opAttrs, [a, b, axisTensor]) as
-        Tensor2D;
+    return Concat([a, b], scalar(1, 'int32')) as Tensor2D;
   }
 
   neg<T extends Tensor>(a: T): T {
diff --git a/src/ops/array_ops_gen.ts b/src/ops/array_ops_gen.ts
new file mode 100644
index 0000000..9ae28fb
--- /dev/null
+++ b/src/ops/array_ops_gen.ts
@@ -0,0 +1,26 @@
+import * as tfc from '@tensorflow/tfjs-core';
+
+import {createTypeOpAttr, getTFDTypeForInputs, nodeBackend} from './op_utils';
+
+/**
+ * Concatenates tensors along one dimension.
+ *
+ * @param values List of `N` Tensors to concatenate. Their ranks and types must
+ *   match, and their sizes must match in all dimensions except `concat_dim`.
+ * @param axis 0-D.  The dimension along which to concatenate.  Must be in the
+ *   range [-rank(values), rank(values)).
+ */
+export function Concat(values: tfc.Tensor[], axis: tfc.Tensor): tfc.Tensor {
+  const opAttrs = [
+    // N | int
+    {name: 'N', type: nodeBackend().binding.TF_ATTR_INT, value: values.length},
+    // T | type
+    createTypeOpAttr('T', getTFDTypeForInputs(values)),
+    // Tidx | type
+    createTypeOpAttr('Tidx', getTFDTypeForInputs(axis))
+  ];
+  const inputs = [] as tfc.Tensor[];
+  values.forEach((input) => inputs.push(input));
+  inputs.push(axis);
+  return nodeBackend().executeSingleOutput('ConcatV2', opAttrs, inputs);
+}
diff --git a/src/ops/op_utils.ts b/src/ops/op_utils.ts
index 8030a9b..5d9fa55 100644
--- a/src/ops/op_utils.ts
+++ b/src/ops/op_utils.ts
@@ -16,7 +16,7 @@
  */
 
 import * as tfc from '@tensorflow/tfjs-core';
-import {isArray, isNullOrUndefined} from 'util';
+import {isArray, isNullOrUndefined, isString} from 'util';
 
 import {NodeJSKernelBackend} from '../nodejs_kernel_backend';
 import {TFEOpAttr} from '../tfjs_binding';
@@ -43,11 +43,11 @@ export function getTFDType(dataType: tfc.DataType): number {
 
 /** Creates a TFEOpAttr for a 'type' OpDef attribute. */
 export function createTypeOpAttr(
-    attrName: string, dtype: tfc.DataType): TFEOpAttr {
+    attrName: string, dtype: tfc.DataType|number): TFEOpAttr {
   return {
     name: attrName,
     type: nodeBackend().binding.TF_ATTR_TYPE,
-    value: getTFDType(dtype)
+    value: typeof dtype === 'string' ? getTFDType(dtype as tfc.DataType) : dtype
   };
 }
 
